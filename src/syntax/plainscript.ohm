PlainScript {
  Program     =  newline* Stmt+ newline*
  Stmt        =  SimpleStmt newline               -- simple
              |  "while" Exp Suite                -- while
              |  "if" Exp Suite
                 ("elif" Exp Suite)*
                 ("else" Suite)?                  -- if
              |  "def" id "(" Params ")" Suite    -- def
  SimpleStmt  =  "let" Ids "=" Exps               -- vardecl
              |  VarExps "=" Exps                 -- assign
              |  Call                             -- call
              |  "break"                          -- break
              |  "return" Exp?                    -- return
  Suite       =  ":" SimpleStmt newline           -- small
              |  ":" newline indent Stmt+ dedent  -- large

  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                    -- unary
              |  Exp5
  Exp5        =  boollit
              |  numlit
              |  strlit
              |  "[" ListOf<Exp, ","> "]"         -- list
              |  Call
              |  VarExp
              |  "(" Exp ")"                      -- parens
  Call        =  VarExp "(" Args ")"

  Exps        =  NonemptyListOf<Exp, ",">
  Ids         =  NonemptyListOf<id, ",">
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  id                               -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  id ("=" Exp)?
  Params      =  ListOf<Param, ",">
  Arg         =  (id ":")? Exp
  Args        =  ListOf<Arg, ",">

  keyword     =  ("while" | "if" | "elif" | "else" | "def" | "let" | "return"
              |  "break" | "and" | "or" | "not" | "true" | "false") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  escape      = "\\" ("\\" | "\"" | "n" | codepoint)
  codepoint   = "u{" hexDigit+ "}"
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  prefixop    =  "-" | "not"
  indent      =  "⇨"
  dedent      =  "⇦"

  newline     =  "\n"+
  space      :=  " " | "\t" | comment
  comment     =  "#" (~"\n" any)*
}
